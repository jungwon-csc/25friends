body {
    font-family: sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f4f4f4;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    min-height: 100vh;
}

.container {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    display: flex;
    gap: 20px;
    max-width: 1000px;
    width: 100%;
}

.name-list, .photo-viewer {
    flex-basis: 50%;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #f9f9f9;
}

.name-list h2, .photo-viewer h2 {
    margin-top: 0;
    color: #333;
    text-align: center;
}

#friendsList {
    list-style: none;
    padding: 0;
}

#friendsList li {
    padding: 10px;
    margin-bottom: 5px;
    background-color: #e9e9e9;
    border-radius: 4px;
    cursor: pointer;
    text-align: center;
}

#friendsList li:hover {
    background-color: #d0d0d0;
}

#imageContainer {
    width: 100%;
    min-height: 300px;
    border: 1px dashed #ccc;
    display: flex; /* 자식인 #displayedImage를 중앙 정렬하기 위함 */
    justify-content: center;
    align-items: center;
    margin-bottom: 15px;
    overflow: hidden;
    position: relative; /* 댄스 GIF의 absolute 위치 기준점 */
}

#displayedImage {
    max-width: 100%;
    max-height: 400px;
    display: block; /* 이미지 자체를 블록 요소로 만들고, 부모 flex에서 정렬되도록 */
    margin: auto;   /* display:block과 함께 사용 시, 부모 flex 내에서 추가적인 중앙 정렬 도움 */
    border-radius: 4px;
    transform: rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1));
    filter: var(--current-bw-filter, none);
    transition: transform 0.3s ease, filter 0.3s ease, opacity 0.3s ease;
}

#controls {
    text-align: center; /* 내부 버튼들이 인라인 블록일 경우 중앙 정렬 */
    margin-top: 10px;
    /* 버튼들이 많아졌으므로 flex로 줄바꿈 처리 */
    display: flex;
    flex-wrap: wrap; /* 버튼들이 넘치면 다음 줄로 */
    justify-content: center; /* 버튼들을 가운데 정렬 */
    gap: 5px; /* 버튼 사이 간격 */
}

#controls button {
    padding: 8px 12px; /* 패딩 약간 조절 */
    margin: 3px; /* 마진 약간 조절 */
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    flex-grow: 1; /* 버튼들이 가능한 공간을 채우도록 (선택 사항) */
    min-width: 100px; /* 최소 너비 (선택 사항) */
}

#controls button:hover {
    background-color: #0056b3;
}

#controls hr { /* 구분선 스타일 명확히 */
    width: 100%;
    border: none;
    border-top: 1px solid #eee;
    margin: 8px 0; /* 구분선 위아래 여백 */
}


/* --- 애니메이션 정의 --- */
@keyframes shake {
    0%, 100% { transform: translateX(0) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); }
    10%, 30%, 50%, 70%, 90% { transform: translateX(-5px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); }
    20%, 40%, 60%, 80% { transform: translateX(5px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); }
}
.shake-animation {
    animation: shake 0.5s ease-in-out;
}

@keyframes pulse { /* 일회성 펄스 */
    0% { transform: scale(var(--current-scale-pulse-start, 1)) rotate(var(--current-rotation, 0deg)); }
    50% { transform: scale(calc(var(--current-scale-pulse-start, 1) * 1.1)) rotate(var(--current-rotation, 0deg)); }
    100% { transform: scale(var(--current-scale-pulse-start, 1)) rotate(var(--current-rotation, 0deg)); }
}
.pulse-animation {
    animation: pulse 0.5s ease-in-out; /* JS에서 .shake-animation처럼 토글 */
}

@keyframes spin {
    from { transform: rotate(0deg) scale(var(--current-scale, 1)); }
    to { transform: rotate(360deg) scale(var(--current-scale, 1)); }
}
.spinning {
    animation: spin 2s linear infinite;
}

@keyframes continuous-pulse { /* 지속적인 두근거림 */
    0% { transform: scale(var(--current-scale-pulse-start, 1)) rotate(var(--current-rotation-pulse, 0deg)); }
    50% { transform: scale(calc(var(--current-scale-pulse-start, 1) * 1.1)) rotate(var(--current-rotation-pulse, 0deg)); }
    100% { transform: scale(var(--current-scale-pulse-start, 1)) rotate(var(--current-rotation-pulse, 0deg)); }
}
.pulsing {
    animation: continuous-pulse 1s ease-in-out infinite;
}

@keyframes blink-effect {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}
.blinking {
    animation: blink-effect 0.7s linear infinite;
}

@keyframes glitch-effect {
    0%, 100% { clip-path: inset(0); opacity: 1; }
    10% { clip-path: inset(5px 0 85px 0); transform: translateX(-3px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); opacity: 0.8; }
    20% { clip-path: inset(70px 0 10px 0); transform: translateX(3px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); opacity: 1; }
    30% { clip-path: inset(85px 0 5px 0); transform: translateX(-3px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); opacity: 0.7;}
    40% { clip-path: inset(10px 0 70px 0); transform: translateX(3px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); opacity: 1;}
    50% { clip-path: inset(30px 0 60px 0); transform: translateX(-4px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); opacity: 0.6;}
    60% { clip-path: inset(60px 0 30px 0); transform: translateX(4px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); opacity: 1;}
    70% { clip-path: inset(20px 0 75px 0); transform: translateX(-2px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); opacity: 0.8;}
    80% { clip-path: inset(75px 0 20px 0); transform: translateX(2px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); opacity: 1;}
    90% { clip-path: inset(45px 0 45px 0); transform: translateX(-3px) rotate(var(--current-rotation, 0deg)) scale(var(--current-scale, 1)); opacity: 0.7;}
}
.glitching {
    animation: glitch-effect 0.3s steps(2, jump-none) 3;
}

/* 댄스 GIF를 위한 스타일 */
.dance-gif-overlay {
    position: absolute;
    z-index: 10;
    pointer-events: none;
    /* width와 transform 등은 JS에서 설정 */
}
